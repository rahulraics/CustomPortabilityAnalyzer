<?xml version="1.0" encoding="utf-8"?>
<Project>

  <!-- Depending on whether it is a VSIX, MSIL or nupkg, choose the correct certificate.
       1) By default, the VSIX project just packages the contents, so
       CopyBuildOutputToOutputDirectory/IncludeAssemblyInVSIXContainer will be
       false. But if you have a VSIX that builds a DLL as well, it will have both
       properties set as true.

       2) When conditions are chosen from top-down... so if multiple ones are true,
       the first one it encounters is the type it chooses.
  -->
  <Choose>
    <When Condition="'$(TargetVsixContainerName)' != '' AND '$(CopyBuildOutputToOutputDirectory)' == 'false' AND '$(IncludeAssemblyInVSIXContainer)' == 'false'">
      <ItemGroup>
        <FilesToSign Include="$(TargetVsixContainer)">
          <Authenticode>VsixSHA2</Authenticode>
        </FilesToSign>
      </ItemGroup>
    </When>
    <When Condition="'$(TargetExt)'!='.nupkg'">
      <ItemGroup>
        <FilesToSign Include="$(OutDir)\$(TargetName)$(TargetExt)">
          <Authenticode>Microsoft400</Authenticode>
        </FilesToSign>
      </ItemGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <!-- try to sign all nupkg files under $(OutDir)-->
        <FilesToSign Include="$(OutDir)\**\%(Filename).nupkg">
          <Authenticode>NuGet</Authenticode>
        </FilesToSign>
      </ItemGroup>
    </Otherwise>
  </Choose>

  <ItemGroup>
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)\stylecop.json" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="MicroBuild.Core" Version="0.2.0" Condition="!$(IsTest)">
      <PrivateAssets>All</PrivateAssets>
    </PackageReference>

    <PackageReference Include="StyleCop.Analyzers" Version="1.1.1-beta.61">
      <PrivateAssets>All</PrivateAssets>
    </PackageReference>

    <!-- Enforcing the same compiler toolset to be used on desktop builds.
      https://github.com/dotnet/roslyn-analyzers/issues/1533#issuecomment-358733030 -->
    <PackageReference Include="Microsoft.Net.Compilers" Version="2.10.0" Condition="'$(OS)' == 'Windows_NT'">
      <PrivateAssets>All</PrivateAssets>
    </PackageReference>

    <PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.6.2" Condition=" '$(IsPackage)' != 'true' ">
      <PrivateAssets>All</PrivateAssets>
    </PackageReference>

    <!-- GitVersionTask is not compiled against .NET Core, so importing the targets will
         result in a failure because it will try to resolve Microsoft.Build.Utilities v4.0 -->
    <PackageReference Include="GitVersionTask" Version="4.0.0" Condition=" '$(MSBuildRuntimeType)' != 'Core' AND Exists('$(MSBuildThisFileDirectory)\.git') ">
      <PrivateAssets>All</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Work around an issue where portable PDB is not supported yet in Api scan tool.
       This does not work in Directory.Build.props because $(TargetFramework) has not been set yet
       when it is imported. -->
  <PropertyGroup>
    <DebugType Condition=" $(TargetFramework.StartsWith('net4')) ">Full</DebugType>
  </PropertyGroup>

  <!-- In .NET Core SDK 1.0-rc3, all *.cs files are implicitly added for compiled.  This includes the test files we embed as resources.
       We explicitly remove them here so that they are not compiled.
       BUG: https://github.com/dotnet/sdk/issues/977 -->
  <Target Name="RemoveEmbeddedResources"
          BeforeTargets="CoreCompile">
    <ItemGroup>
      <Compile Remove="@(EmbeddedResource-> '%(Identity)')" />
    </ItemGroup>
  </Target>

  <Target Name="CopyBuildOutputToRawDirectory"
          AfterTargets="AfterBuild"
          Condition="!$(IsTest) AND '$(IsPackage)' != 'true' ">
    <MakeDir Directories="$(RawBinariesDropDirectory)\$(TargetFramework)" />
    <Message Text="Copying $(OutDir)\$(TargetName)$(TargetExt) to $(RawBinariesDropDirectory)\$(TargetFramework)"
             Importance="low" />
    <Copy SourceFiles="$(OutDir)\$(TargetName)$(TargetExt)"
          DestinationFolder="$(RawBinariesDropDirectory)\$(TargetFramework)" />
    <MakeDir Directories="$(RawSymbolsDropDirectory)\$(TargetFramework)" />
    <Message Text="Copying $(OutDir)\$(TargetName).pdb to $(RawSymbolsDropDirectory)\$(TargetFramework)"
             Importance="low" />
    <Copy SourceFiles="$(OutDir)\$(TargetName).pdb"
          DestinationFolder="$(RawSymbolsDropDirectory)\$(TargetFramework)" />
  </Target>
  <Import Project="$(MicrobuildSigningPluginDirectory)build\Microbuild.Plugins.Signing.targets" Condition="Exists('$(MicrobuildSigningPluginDirectory)build\Microbuild.Plugins.Signing.targets')" />
</Project>
